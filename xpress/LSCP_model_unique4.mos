model LSCP
uses "mmxprs"; !gain access to the Xpress-Optimizer solver
uses "mmsystem"

! Declare a procedure that is defined later
forward procedure qsort(L:array(range) of integer)

!optional parameters section
stime:=gettime

!declaration of arrays and variables
declarations
  index=1..55
  squareNodes=1..3025
  x: array(index) of mpvar
  points: array(index,1..4) of integer
  uniqueD: array(squareNodes) of integer
  dist: array(index,index) of integer
  distVect: array(squareNodes) of integer
  !smax: real
  iterations: integer
  smax_squared: integer
  num_fac: real
  cover: array(index) of linctr
  LSCPobjective:linctr
end-declarations

points:: [01, 32, 31, 71,
02, 29, 32, 62,
03, 27, 36, 56,
04, 29, 29, 39,
05, 32, 29, 35,
06, 26, 25, 21,
07, 24, 33, 20,
08, 30, 35, 19,
09, 29, 27, 17,
10, 29, 21, 17,
11, 33, 28, 16,
12, 17, 53, 15,
13, 34, 30, 14,
14, 25, 60, 12,
15, 21, 28, 12,
16, 30, 51, 11,
17, 19, 47, 10,
18, 17, 33, 10,
19, 22, 40, 9,
20, 25, 14, 9,
21, 29, 12, 9,
22, 24, 48, 8,
23, 17, 42, 8,
24, 6, 26, 8,
25, 19, 21, 8,
26, 10, 32, 7,
27, 34, 56, 6,
28, 12, 47, 6,
29, 19, 38, 6,
30, 27, 41, 6,
31, 21, 35, 6,
32, 32, 45, 5,
33, 27, 45, 5,
34, 32, 38, 5,
35, 8, 22, 5,
36, 15, 25, 5,
37, 35, 16, 5,
38, 36, 47, 4,
39, 46, 51, 4,
40, 50, 40, 4,
41, 23, 22, 4,
42, 27, 30, 4,
43, 38, 39, 4,
44, 36, 32, 4,
45, 32, 41, 3,
46, 42, 36, 3,
47, 36, 26, 3,
48, 15, 19, 3,
49, 19, 14, 3,
50, 45, 19, 3,
51, 27, 5, 3,
52, 52, 24, 2,
53, 40, 22, 2,
54, 40, 52, 2,
55, 42, 42, 2]


! generate distance matrix
q:=0
forall(i in index, j in index) do
	dist(i,j):= (points(i,2)-points(j,2))*(points(i,2)-points(j,2)) + (points(i,3)-points(j,3))*(points(i,3)-points(j,3))
	q:=q+1
	distVect(q):=dist(i,j)
end-do

! sort distances, and create new array of only unique distance values
qsort(distVect)   ! Sort the array
q:=1
int2:=-1
forall(i in squareNodes) do
	int1:=distVect(i)
	if int1 <> int2 then
		uniqueD(q):= int1
		int2:= int1
		q:=q+1
	end-if	
end-do

! define objective and variables
LSCPobjective:=  sum(j in index) x(j)	
forall (j in index) x(j) is_binary

! solve LSCP for each unique coverage distance in the distance matrix, outputting 
! the smax value when a new objective is found
uniqueN:=2..q-1 

! The 55 facility problem is trivial
writeln("Smax = ", 0)
writeln("Objective Value = ", 55)

forall(k in uniqueN) do

	!smax_squared:=uniqueD(453-k)  no longer used
	smax_squared:=uniqueD(k)

	forall(i in index) do
		cover(i):=  sum(j in index | dist(i,j) <= smax_squared ) x(j) >= 1
	end-do

	minimize (LSCPobjective)

	if (getsol(LSCPobjective)<>num_fac) then
		num_fac:=getsol(LSCPobjective)
		!smax:= smax_squared^0.5
		writeln("Smax = ", smax_squared^0.5)
		writeln("Objective Value = ", num_fac)
	end-if
	
	! stop once the 1-facility solution is found
	if (num_fac = 1) then
		iterations := k
		break 1
	end-if

end-do  ! for repitition of model solving

stime:=gettime-stime
writeln(iterations," unique distances evaluated in ",stime," seconds")


!***********************************************************************
! Swap the positions of two numbers in an array
!*********************************************************************** 
 procedure swap(L:array(range) of integer,i,j:integer)
  k:=L(i)
  L(i):=L(j)
  L(j):=k
 end-procedure

!***********************************************************************
! Sorting routine:
!  - determine a partitioning value
!  - partition the array into two subarrays:
!    put all numbers smaller than the partitioning value into the left,
!    all numbers larger than the partitioning value into the right array
!  - recursively sort the two subarrays
!***********************************************************************
 procedure qsort(L:array(range) of integer,s,e:integer)
  v:=L((s+e) div 2)
  i:=s; j:=e
  repeat
   while(L(i)<v) i+=1
   while(L(j)>v) j-=1
   if i<j  then
    swap(L,i,j)
    i+=1; j-=1
   end-if
  until i>=j
  if j<e and s<j then qsort(L,s,j); end-if
  if i>s and i<e then qsort(L,i,e); end-if
 end-procedure

!***********************************************************************
! Start of the sorting process 
!***********************************************************************
 procedure qsort(L:array(r:range) of integer)
  qsort(L,r.first,r.last)
 end-procedure

end-model
